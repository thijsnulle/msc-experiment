{"selected_lines": [33, 38, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006704092025756836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008716106414794922, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 42, 37, 41, 39, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.01025390625, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007934808731079102, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 40, 33, 36, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.01025700569152832, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0031042098999023438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00973367691040039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 32, 39, 35, 37, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008279085159301758, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 41, 39, 34, 36, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.00783991813659668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009295940399169922, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0078887939453125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 36, 40, 34, 35, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008517026901245117, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002788066864013672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 35, 38, 32, 37, 33, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 42, 38, 40, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00257110595703125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 35, 39, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007930994033813477, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 36, 40, 39, 41, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0083160400390625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 38, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009062051773071289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00987100601196289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 34, 35, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 35, 32, 36, 33, 34, 40, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0062677860260009766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 41, 42, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009264945983886719, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 32, 34, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008215904235839844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 41, 34, 32, 42, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008030891418457031, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 36, 37, 35, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007657289505004883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 32, 35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008956193923950195, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 32, 34, 38, 40, 39, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 32, 34, 39, 33, 36, 40, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001856088638305664, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 39, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 42, 36, 38, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 38, 36, 37, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008476972579956055, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007988929748535156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 42, 35, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0021839141845703125, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 34, 37, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008192062377929688, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008955240249633789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 32, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008847713470458984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009206056594848633, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 33, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0131988525390625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 33, 38, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008168220520019531, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 37, 36, 40, 38, 35, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0060901641845703125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008257627487182617, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 34, 40, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002165079116821289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 38, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009557962417602539, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 32, 41, 34, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008011102676391602, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 41, 32, 34, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008086919784545898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32, 34, 42, 36, 40, 38, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008382081985473633, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008555173873901367, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 34, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008649110794067383, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007676124572753906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 34, 33, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002397775650024414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 41, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007619142532348633, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007876873016357422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 33, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 42, 34, 40, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815837860107422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 40, 38, 32, 34, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009299993515014648, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009212970733642578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008077144622802734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 37, 32, 38, 34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 38, 33, 42, 34, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0017201900482177734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 34, 33, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002187013626098633, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 36, 40, 42, 32, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008334875106811523, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 41, 34, 32, 42, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008030891418457031, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 34, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008512020111083984, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009112119674682617, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 32, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00864720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 38, 40, 34, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007530927658081055, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 33, 41, 38, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.00733184814453125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 32, 34, 36, 33, 41, 40, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004754304885864258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 42, 33, 38, 41, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0080108642578125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34, 41, 42, 40, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007566690444946289, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008185148239135742, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007096052169799805, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007177829742431641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 32, 37, 41, 34, 39, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0014851093292236328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 42, 33, 36, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0014803409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 40, 42, 37, 32, 38, 34, 39, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007174015045166016, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 41, 33, 34, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 42, 36, 38, 33, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007621288299560547, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 35, 41, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008584737777709961, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 33, 40, 39, 42, 36, 34, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 39, 42, 35, 33, 41, 40, 38, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0014889240264892578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 39, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0013921260833740234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 42, 33, 41, 35, 34, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.001432180404663086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 41, 33, 35, 36, 32, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.012562036514282227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 32, 34, 35, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007091045379638672, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [35, 41, 40, 36, 32, 37, 33, 34, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008199930191040039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 40, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008234977722167969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 35, 32, 42, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009368658065795898, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 38, 42, 37, 33, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.00802302360534668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 39, 38, 36, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007647275924682617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 32, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00864720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 41, 42, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007559776306152344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 42, 41, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008559226989746094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 41, 32, 40, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 42, 33, 41, 40, 38, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.00794219970703125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 32, 37, 36, 34, 38, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007547855377197266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 34, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007202863693237305, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 34, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007202863693237305, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009206056594848633, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 37, 33, 41, 35, 34, 38, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007551908493041992, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 38, 41, 42, 40, 37, 34, 36, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007976770401000977, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 36, 35, 33, 41, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 32, 38, 34, 40, 42, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007548093795776367, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 42, 36, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007234096527099609, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008257627487182617, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 32, 39, 33, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0071947574615478516, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008257150650024414, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 35, 33, 39, 34, 36, 37, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 39, 36, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008990287780761719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 41, 40, 42, 36, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007772207260131836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 34, 42, 36, 40, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007192134857177734, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 37, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0015828609466552734, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007603883743286133, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 39, 37, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007310152053833008, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004781007766723633, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008639097213745117, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008594751358032227, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 40, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 39, 35, 41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0071868896484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 32, 35, 33, 40, 37, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002251148223876953, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 32, 34, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007359981536865234, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002062082290649414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.002231121063232422, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 34, 35, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008031129837036133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41, 40, 38, 32, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008326053619384766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 38, 35, 41, 40, 33, 34, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007073163986206055, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 42, 38, 35, 37, 39, 34, 33, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0054090023040771484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 41, 40, 33, 34, 42, 35, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0051670074462890625, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007447719573974609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 38, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0022437572479248047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007482051849365234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.005636930465698242, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 39, 34, 38, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0073070526123046875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 38, 34, 32, 42, 33, 40, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004709005355834961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 42, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007040977478027344, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00795602798461914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 32, 38, 41, 36, 35, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008303165435791016, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 32, 36, 34, 33, 35, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0078067779541015625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 42, 34, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0015990734100341797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 37, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007834911346435547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 42, 38, 36, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0019273757934570312, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00795602798461914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 42, 34, 36, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006986856460571289, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 39, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0074808597564697266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 42, 40, 34, 33, 41, 37, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0014119148254394531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007772207260131836, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0024700164794921875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 42, 32, 36, 40, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00757598876953125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 42, 40, 33, 39, 34, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009295940399169922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 34, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008073091506958008, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 37, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008070945739746094, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007134914398193359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 35, 38, 37, 34, 32, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007149219512939453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 32, 40, 36, 37, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007237911224365234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 39, 38, 40, 41, 42, 33, 34, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 36, 38, 40, 32, 39, 33, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0018706321716308594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008061885833740234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008153915405273438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 39, 36, 34, 41, 38, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007215261459350586, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 38, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007422924041748047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 37, 39, 41, 38, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007245063781738281, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007879972457885742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 33, 41, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 40, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008363962173461914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 39, 35, 41, 32, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38, 40, 36, 42, 41, 32, 35, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 42, 38, 35, 33, 39, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0013048648834228516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.005432844161987305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 36, 42, 34, 37, 39, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 42, 34, 41, 33, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 36, 42, 34, 35, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075147151947021484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 40, 42, 38, 35, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007401943206787109, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 42, 40, 35, 32, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007473945617675781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 41, 32, 39, 38, 33, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0068302154541015625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 38, 32, 37, 34, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 33, 39, 40, 38, 42, 37, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 36, 39, 42, 37, 35, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 37, 34, 39, 32, 35, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 40, 33, 38, 41, 37, 36, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007860183715820312, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.010461091995239258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 42, 41, 37, 33, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 37, 38, 34, 39, 36, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.010421991348266602, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 39, 37, 36, 41, 42, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009419918060302734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 33, 34, 42, 32, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006231069564819336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008610010147094727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 39, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0074808597564697266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 40, 37, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009171009063720703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.010197162628173828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 34, 42, 38, 39, 33, 40, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00972604751586914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 33, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008141756057739258, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 34, 36, 35, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008148193359375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007590293884277344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 40, 39, 35, 37, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009134054183959961, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 33, 40, 38, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002213001251220703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00973367691040039, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 41, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0020208358764648438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002099752426147461, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34, 32, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007882118225097656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 42, 35, 39, 38, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 42, 41, 34, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007720947265625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 42, 41, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0071871280670166016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.01025390625, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007088184356689453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 39, 42, 40, 38, 35, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008535146713256836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 39, 41, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0019941329956054688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 40, 37, 36, 34, 42, 41, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007371187210083008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 38, 37, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0021021366119384766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004881143569946289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 36, 41, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009206056594848633, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 38, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0069468021392822266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 40, 38, 32, 42, 34, 37, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006723880767822266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008594751358032227, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 39, 42, 41, 37, 40, 34, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0013289451599121094, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 42, 36, 37, 41, 39, 35, 34, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 38, 34, 35, 33, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 41, 42, 39, 33, 35, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 36, 34, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.00799703598022461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 42, 36, 38, 33, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007621288299560547, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 36, 32, 34, 33, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006606101989746094, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 41, 42, 32, 33, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008308172225952148, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 40, 42, 38, 35, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007401943206787109, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0021479129791259766, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 34, 32, 40, 36, 38, 37, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 36, 39, 32, 34, 42, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 40, 38, 32, 37, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 37, 32, 34, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007032155990600586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 34, 33, 38, 37, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007042884826660156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009241819381713867, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 40, 35, 39, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007219076156616211, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 32, 33, 41, 38, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00826406478881836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 34, 39, 35, 41, 33, 32, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00208282470703125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007166862487792969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 39, 32, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0047760009765625, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0026853084564208984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 32, 37, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 34, 33, 36, 39, 35, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0016109943389892578, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 34, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007202863693237305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008660078048706055, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 41, 40, 36, 33, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009143829345703125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 37, 40, 36, 42, 41, 35, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.00798487663269043, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 42, 40, 37, 41, 38, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007032155990600586, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 40, 33, 36, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0018858909606933594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 40, 42, 35, 34, 32, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00687098503112793, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 34, 35, 37, 33, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008040189743041992, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 34, 37, 42, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008172035217285156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008091211318969727, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 38, 35, 39, 40, 37, 36, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007238149642944336, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 38, 36, 37, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008476972579956055, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 33, 35, 32, 41, 34, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008566856384277344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33, 36, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0071070194244384766, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 41, 37, 32, 40, 35, 36, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0016293525695800781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 39, 40, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008363962173461914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008003950119018555, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 38, 41, 32, 40, 34, 37, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004625082015991211, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 42, 38, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0020751953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 39, 37, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 42, 40, 41, 32, 36, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006731986999511719, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 35, 39, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007848978042602539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 33, 41, 42, 36, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 40, 41, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0013432502746582031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008178949356079102, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.005260944366455078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 42, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.006814002990722656, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008594751358032227, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 39, 37, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006922006607055664, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 38, 42, 34, 37, 36, 35, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.008054971694946289, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 34, 42, 36, 35, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006578207015991211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009206056594848633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 41, 37, 35, 40, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007943868637084961, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [37, 41, 34, 38, 40, 35, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 38, 42, 37, 34, 33, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0047342777252197266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 39, 32, 40, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 42, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004666328430175781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 37, 38, 32, 39, 42, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006703853607177734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 42, 39, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007036924362182617, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008339166641235352, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 42, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008116960525512695, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 38, 40, 33, 35, 34, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.rglob('*.txt'):\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0014350414276123047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071048736572265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 42, 41, 37, 39, 34, 36, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 41, 35, 39, 38, 40, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007252931594848633, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 41, 42, 32, 39, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007112026214599609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 34, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007202863693237305, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 40, 32, 42, 39, 35, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008505105972290039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 41, 37, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0014002323150634766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008426904678344727, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 35, 37, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 34, 32, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004927158355712891, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 34, 42, 36, 40, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006866931915283203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0020558834075927734, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 40, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006971836090087891, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 42, 34, 41, 35, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004781007766723633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 32, 40, 33, 41, 38, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00203704833984375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 38, 42, 40, 33, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 34, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0015959739685058594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 33, 40, 39, 36, 32, 38, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0012857913970947266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 38, 35, 33, 36, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00719904899597168, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 33, 32, 35, 36, 42, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007919073104858398, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 34, 40, 32, 36, 35, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006824016571044922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00790095329284668, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007915019989013672, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 41, 35, 40, 42, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007506847381591797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 42, 37, 36, 40, 39, 32, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.008331060409545898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 33, 37, 32, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007029056549072266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0067250728607177734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006782054901123047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38, 39, 37, 40, 41, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008320093154907227, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 37, 42, 35, 40, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0020601749420166016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 32, 36, 40, 34, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.005461931228637695, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007642269134521484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007327079772949219, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0073049068450927734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 41, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007348775863647461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0078887939453125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 33, 37, 41, 35, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007817983627319336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 39, 37, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007874011993408203, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0019283294677734375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007236003875732422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 41, 33, 40, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007315158843994141, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 37, 34, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007564067840576172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007732868194580078, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 42, 38, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007921934127807617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008666038513183594, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 34, 41, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006921052932739258, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 38, 33, 37, 32, 39, 35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006580352783203125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 41, 36, 33, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00742793083190918, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 38, 42, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008414983749389648, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008976936340332031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 40, 36, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0015213489532470703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 35, 40, 39, 42, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 34, 42, 36, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0070002079010009766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 37, 33, 34, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 38, 32, 37, 42, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0048410892486572266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 34, 35, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 33, 35, 37, 36, 41, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0077402591705322266, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 35, 33, 37, 34, 41, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008522987365722656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 35, 40, 36, 33, 37, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007944822311401367, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 38, 32, 36, 37, 34, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007040977478027344, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008213996887207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007398843765258789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 38, 40, 42, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 34, 33, 37, 40, 38, 32, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007834911346435547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 41, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008181095123291016, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006983757019042969, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 42, 38, 35, 33, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007030963897705078, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 38, 32, 40, 33, 36, 42, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006548166275024414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 40, 38, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007842063903808594, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 39, 42, 37, 41, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0018758773803710938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 37, 41, 35, 42, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 33, 36, 34, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007437944412231445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009433984756469727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 37, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.001984119415283203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 34, 39, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 42, 34, 36, 39, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007508993148803711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 40, 35, 36, 42, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0074291229248046875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 36, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007256746292114258, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 40, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 39, 40, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008234024047851562, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 36, 38, 32, 35, 33, 37, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 41, 33, 42, 35, 37, 36, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.008059024810791016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 42, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007073163986206055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 42, 41, 36, 34, 33, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007478952407836914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 35, 38, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 39, 42, 41, 37, 36, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0072078704833984375, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 34, 42, 37, 41, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.004730224609375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 35, 38, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006726980209350586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 34, 35, 42, 40, 39, 36, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 42, 34, 38, 32, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006867170333862305, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 38, 35, 33, 34, 40, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006793022155761719, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0019047260284423828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 41, 33, 37, 34, 40, 32, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0014548301696777344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 41, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006819963455200195, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 38, 42, 39, 40, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007194995880126953, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 38, 41, 35, 39, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002064228057861328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 42, 34, 36, 39, 41, 37, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 37, 32, 36, 42, 38, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0014178752899169922, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 35, 34, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 39, 42, 38, 34, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007367849349975586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 40, 39, 41, 37, 33, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.010184049606323242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 34, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 34, 38, 39, 40, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007187843322753906, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 42, 33, 32, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007163047790527344, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 40, 41, 35, 32, 33, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007778167724609375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 32, 36, 33, 41, 34, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 42, 40, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002145051956176758, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 36, 34, 37, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0076677799224853516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 36, 39, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0073909759521484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 42, 39, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007077217102050781, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007439136505126953, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008610010147094727, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 38, 35, 32, 34, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007500171661376953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 37, 41, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075876712799072266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 42, 36, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007544994354248047, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 35, 42, 36, 39, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 37, 38, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007254838943481445, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 34, 41, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008239984512329102, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 34, 36, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0076351165771484375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0022439956665039062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 35, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 41, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0020248889923095703, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007934808731079102, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 32, 35, 33, 41, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 38, 33, 36, 42, 34, 39, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007486104965209961, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008555173873901367, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007866859436035156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 41, 37, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008604049682617188, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 40, 37, 34, 36, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007684946060180664, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002012968063354492, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008339166641235352, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007461071014404297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007590293884277344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 39, 36, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007256746292114258, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0078887939453125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 40, 42, 39, 36, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007582187652587891, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 40, 34, 37, 32, 42, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 37, 39, 41, 36, 40, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008168935775756836, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007772207260131836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 40, 41, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009068727493286133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 35, 33, 40, 34, 41, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0060558319091796875, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00781702995300293, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 39, 32, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007356882095336914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 42, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071370601654052734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 40, 42, 38, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007041215896606445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007769107818603516, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 33, 40, 38, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 36, 41, 33, 32, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008881807327270508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 41, 32, 39, 38, 33, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0068302154541015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 33, 38, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 34, 39, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00751495361328125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 34, 36, 33, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 41, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0015931129455566406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 40, 39, 35, 33, 37, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007127046585083008, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007337093353271484, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007887840270996094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.01025390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0076940059661865234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 39, 33, 40, 35, 32, 36, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00864720344543457, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 37, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007881879806518555, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 32, 39, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007506370544433594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 36, 42, 41, 38, 39, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008255958557128906, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 41, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007518768310546875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 39, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0022881031036376953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008954048156738281, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 32, 42, 40, 36, 35, 33, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007954120635986328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 41, 39, 33, 42, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007513999938964844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008555173873901367, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 36, 35, 34, 37, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007620096206665039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007678031921386719, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 42, 39, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009415388107299805, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007570028305053711, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 41, 35, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007750034332275391, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007884025573730469, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007511138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007645130157470703, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007876157760620117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008555173873901367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 42, 35, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.008804082870483398, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 32, 37, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008434295654296875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00750279426574707, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00735926628112793, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009295940399169922, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0074121952056884766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 42, 40, 35, 32, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007473945617675781, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002193927764892578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 40, 38, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 38, 34, 36, 32, 35, 39, 42, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007714986801147461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 36, 42, 37, 33, 34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008949995040893555, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 38, 36, 40, 37, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00686192512512207, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34, 39, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00751495361328125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 41, 32, 40, 37, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071790218353271484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 35, 32, 34, 42, 36, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007111310958862305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 40, 32, 37, 42, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007497072219848633, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 35, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.00943899154663086, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 33, 36, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007498979568481445, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 35, 38, 32, 34, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.005548000335693359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 33, 36, 40, 35, 37, 39, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007949113845825195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00767207145690918, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007921934127807617, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 33, 35, 36, 38, 39, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007647037506103516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 40, 32, 41, 42, 39, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008257150650024414, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 39, 36, 38, 40, 35, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0021581649780273438, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 37, 42, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 32, 42, 33, 36, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0067310333251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 34, 38, 39, 40, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007187843322753906, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 42, 34, 32, 33, 38, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004563808441162109, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0068340301513671875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 38, 41, 34, 40, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007081031799316406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 32, 38, 34, 40, 42, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008666038513183594, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 36, 41, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006959199905395508, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 41, 32, 35, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006872892379760742, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006983280181884766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008955240249633789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 34, 33, 35, 41, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008543014526367188, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 39, 41, 37, 32, 36, 38, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007660865783691406, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 33, 38, 40, 32, 37, 34, 39, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007192850112915039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007772207260131836, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0074999332427978516, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 40, 32, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 41, 35, 39, 33, 36, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40, 41, 34, 39, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 35, 33, 39, 34, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007560014724731445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 34, 42, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008401870727539062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 38, 41, 33, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0018661022186279297, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008493661880493164, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 38, 32, 36, 35, 40, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004948139190673828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0018930435180664062, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41, 33, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006922006607055664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006361722946166992, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [37, 41, 33, 36, 32, 40, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006877899169921875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 41, 37, 40, 32, 35, 36, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004698991775512695, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008080005645751953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 33, 39, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008198261260986328, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 39, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007436990737915039, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 38, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0076258182525634766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 38, 35, 32, 41, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006754636764526367, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 41, 35, 39, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007674217224121094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007767200469970703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 37, 39, 38, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008379936218261719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006800174713134766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0016100406646728516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007306814193725586, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 42, 34, 35, 38, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008021116256713867, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0016109943389892578, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00792694091796875, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 32, 38, 41, 42, 39, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008845090866088867, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 40, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007712125778198242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 35, 42, 36, 33, 41, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00745701789855957, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 41, 32, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007226228713989258, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 33, 34, 32, 36, 39, 42, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 42, 36, 32, 41, 34, 35, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 32, 35, 37, 39, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.00716400146484375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008091211318969727, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008788108825683594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 42, 40, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007483959197998047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 42, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007280826568603516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007306814193725586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 34, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007202863693237305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007051944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 40, 34, 36, 32, 41, 38, 39, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.001953125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 37, 39, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 34, 37, 39, 42, 32, 40, 38, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 32, 40, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0012941360473632812, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 37, 38, 33, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0067141056060791016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 35, 32, 33, 36, 40, 34, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008591890335083008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 37, 40, 33, 36, 32, 41, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002015829086303711, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 41, 34, 36, 33, 39, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 40, 36, 33, 39, 34, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006950855255126953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 32, 36, 34, 40, 37, 41, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0020160675048828125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 42, 40, 41, 32, 34, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006840944290161133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 42, 39, 32, 35, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0018229484558105469, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 36, 35, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007092952728271484, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006994009017944336, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 39, 38, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007358074188232422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 40, 33, 34, 39, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_file():\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008363962173461914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007505178451538086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 42, 38, 35, 36, 34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004737138748168945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 42, 32, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006594181060791016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 35, 32, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006768226623535156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 39, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008229732513427734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 41, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007348775863647461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007625102996826172, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006968021392822266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 41, 39, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0018203258514404297, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 40, 36, 32, 35, 42, 39, 37, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006553173065185547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42, 33, 39, 36, 41, 37, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0066051483154296875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 35, 34, 39, 38, 33, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 39, 35, 40, 37, 32, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 33, 42, 34, 40, 35, 38, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.03413677215576172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 40, 42, 39, 32, 41, 34, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008603811264038086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008555173873901367, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007937908172607422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007458209991455078, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 32, 38, 33, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.006963014602661133, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 41, 34, 37, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004878997802734375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 41, 40, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002172231674194336, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 42, 37, 34, 36, 32, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00829005241394043, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 33, 40, 38, 42, 36, 41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004945039749145508, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 42, 38, 34, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0078008174896240234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 42, 38, 35, 37, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.glob('*'):\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 38, 32, 42, 41, 39, 37, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007513761520385742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 42, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00777888298034668, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 37, 42, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008639335632324219, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 41, 39, 36, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002289295196533203, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007765054702758789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 35, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008172035217285156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 41, 38, 33, 36, 39, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 33, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0019261837005615234, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41, 42, 39, 34, 33, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42, 40, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071773529052734375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 36, 32, 42, 37, 38, 40, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00464630126953125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 40, 33, 42, 35, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0018949508666992188, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 39, 38, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006990909576416016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 36, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008140087127685547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 42, 35, 39, 38, 41, 33, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008729934692382812, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 35, 34, 41, 38, 33, 37, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006930112838745117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007270097732543945, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007745027542114258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 33, 41, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006968975067138672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 40, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007876157760620117, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007017850875854492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 41, 37, 39, 32, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002262115478515625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 41, 39, 37, 36, 42, 38, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009917020797729492, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007915019989013672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 41, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007348775863647461, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008176803588867188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 36, 38, 33, 37, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007303953170776367, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00781702995300293, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 32, 35, 39, 33, 40, 41, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0078887939453125, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 40, 42, 32, 36, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006946086883544922, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 40, 37, 35, 38, 33, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0013289451599121094, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 36, 34, 42, 37, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007815837860107422, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 32, 41, 35, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0073277950286865234, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 36, 35, 40, 38, 32, 39, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007154941558837891, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 39, 38, 34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.004734039306640625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 39, 42, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00712895393371582, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 41, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00833272933959961, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008955240249633789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 41, 40, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.002206087112426758, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34, 32, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007481098175048828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 32, 33, 36, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007311820983886719, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007565736770629883, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075032711029052734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 39, 32, 37, 40, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 37, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 34, 39, 42, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00751495361328125, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007887125015258789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007511138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 42, 39, 38, 32, 40, 41, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0019719600677490234, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 40, 32, 39, 36, 41, 33, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.0013899803161621094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 39, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0013079643249511719, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006361722946166992, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [36, 33, 38, 37, 34, 40, 39, 32, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 41, 39, 40, 37, 33, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007976770401000977, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 42, 36, 40, 32, 35, 38, 39, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008173227310180664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32, 35, 41, 37, 42, 38, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007492780685424805, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007732868194580078, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0019540786743164062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0019061565399169922, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007982015609741211, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007188081741333008, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 42, 34, 36, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.007234811782836914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 42, 33, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.005434989929199219, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008009910583496094, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 38, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007422924041748047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008799076080322266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 34, 33, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007364034652709961, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 33, 42, 34, 35, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008016824722290039, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006987094879150391, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 37, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0021288394927978516, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41, 35, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00706934928894043, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008955240249633789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 36, 37, 42, 39, 35, 41, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007390022277832031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009419918060302734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 40, 35, 32, 39, 37, 36, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008928060531616211, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 39, 36, 32, 34, 42, 33, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 39, 37, 35, 40, 41, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a valid directory path.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007071018218994141, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 39, 40, 32, 35, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006911039352416992, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071887969970703125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 38, 34, 42, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 33, 42, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006824970245361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0023686885833740234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 33, 36, 40, 35, 37, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008682012557983398, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 32, 35, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007511138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 36, 33, 42, 39, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071201324462890625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 36, 34, 33, 32, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004580974578857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007069110870361328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 34, 40, 33, 42, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007145881652832031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007937908172607422, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006994962692260742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 42, 38, 35, 34, 32, 41, 40, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.0068318843841552734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 32, 33, 40, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006643772125244141, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 37, 34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007608175277709961, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 38, 42, 32, 36, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0022897720336914062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 38, 39, 36, 40, 35, 32, 37, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 36, 38, 33, 37, 34, 42, 32, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007827997207641602, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 34, 32, 38, 39, 37, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008486032485961914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 42, 34, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.002124786376953125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 36, 37, 42, 39, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007732868194580078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 32, 41, 33, 36, 37, 38, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0069959163665771484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 39, 37, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007310152053833008, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 35, 39, 34, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.001987934112548828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 39, 40, 37, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007066011428833008, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 37, 40, 38, 41, 33, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 33, 37, 38, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007001161575317383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007905006408691406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 41, 42, 37, 34, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008337736129760742, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 33, 35, 41, 42, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008172988891601562, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 34, 38, 41, 33, 37, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 35, 42, 41, 40, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 41, 35, 42, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007178068161010742, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 34, 33, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007364034652709961, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007343769073486328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007511138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075681209564208984, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007964849472045898, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007866859436035156, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 35, 32, 39, 36, 40, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008408069610595703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 42, 38, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00738978385925293, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007111787796020508, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 33, 42, 37, 39, 41, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0014338493347167969, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 32, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006782054901123047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 39, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source path '{source_path}' does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 37, 38, 33, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007354021072387695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 40, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007511138916015625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007508039474487305, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 33, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 33, 40, 34, 38, 39, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 42, 32, 34, 35, 33, 37, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.00791788101196289, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 33, 37, 42, 39, 36, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0018579959869384766, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 40, 34, 35, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007483005523681641, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 36, 37, 32, 33, 39, 35, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 37, 40, 38, 33, 41, 42, 35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007051944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 38, 33, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007132053375244141, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008257627487182617, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008016824722290039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 37, 41, 36, 35, 32, 33, 40, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0076181888580322266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 38, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009071111679077148, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 37, 33, 39, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0069141387939453125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 41, 35, 32, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Source directory does not exist: {source_path}\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007462978363037109, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007827997207641602, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 36, 42, 32, 34, 37, 33, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.002104043960571289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 37, 35, 38, 36, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001306295394897461, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075299739837646484, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008339166641235352, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 40, 41, 39, 42, 35, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007342100143432617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007905006408691406, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 35, 33, 41, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'source_path must be an existing, accessible directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009678840637207031, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0071980953216552734, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 36, 41, 39, 34, 32, 33, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007471799850463867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 33, 39, 37, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007318973541259766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006800174713134766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 40, 34, 42, 35, 41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.005119800567626953, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 32, 41, 36, 37, 39, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0019352436065673828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007883071899414062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 35, 36, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008196115493774414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 34, 40, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008086919784545898, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 41, 40, 39, 38, 36, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007170915603637695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.009295940399169922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 41, 34, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007112979888916016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40, 39, 41, 32, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0021140575408935547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 42, 39, 41, 40, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0073871612548828125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 40, 36, 39, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008375883102416992, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 34, 35, 36, 32, 38, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007442951202392578, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_dir() and not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0018649101257324219, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 35, 41, 34, 36, 37, 40, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007077217102050781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 40, 42, 36, 32, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 34, 38, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007691860198974609, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 34, 33, 40, 36, 35, 38, 41, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f\"Source directory {source_path.resolve()} does not exist.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007794857025146484, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 38, 36, 35, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008669376373291016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 32, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007773160934448242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 42, 41, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008163213729858398, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 40, 38, 42, 33, 35, 32, 34, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007887125015258789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 33, 39, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007111072540283203, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 37, 35, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 37, 35, 33, 36, 34, 38, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0049550533294677734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.009206056594848633, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 33, 37, 38, 40, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 42, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 39, 35, 34, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 32, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 35, 32, 41, 39, 38, 37, 40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007169008255004883, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 32, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 38, 42, 37, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42, 40, 36, 38, 39, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007414817810058594, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 37, 33, 39, 36, 41, 35, 34, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008700847625732422, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00790095329284668, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0075719356536865234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 41, 36, 39, 40, 35, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007031679153442383, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 42, 40, 41, 37, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007461071014404297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 35, 36, 37, 41, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007428169250488281, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007745027542114258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 37, 33, 35, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path does not exist or is not a directory: {source_path.resolve()}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return source_path.stem, results", "compilation_passed": true, "time": 0.008660078048706055, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 38, 34, 37, 41, 32, 35, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError('Source directory does not exist.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path).with_name(entry.name)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00801992416381836, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38, 35, 41, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob(\"*.txt\"):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007229804992675781, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008049726486206055, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007108211517333984, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 40, 32, 33, 37, 39, 41, 36, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if not entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0017771720886230469, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37, 32, 34, 42, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008215904235839844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*.txt'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004951000213623047, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0072879791259765625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 32, 41, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path)\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007862091064453125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 41, 39, 32, 36, 35, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copyfile(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 34, 38, 35, 39, 40, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0014483928680419922, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007997989654541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007772207260131836, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007200002670288086, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00781702995300293, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 41, 36, 34, 42, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.006162881851196289, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 36, 41, 32, 38, 33, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007328987121582031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 36, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007156848907470703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00809788703918457, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007915019989013672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 37, 40, 32, 39, 34, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 40, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008234977722167969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 42, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001348257064819336, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'{source_path} is not an existing directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008091211318969727, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007879972457885742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 32, 33, 42, 41, 37, 40, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007019996643066406, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0067899227142333984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 39, 41, 34, 38, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry.resolve()), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 41, 34, 37, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 32, 35, 41, 42, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).absolute()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f\"The {source_path} directory does not exist or is not a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.name.startswith(\".\"):\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0017879009246826172, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 39, 36, 33, 35, 37, 38, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008629083633422852, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 37, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007132053375244141, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.006876945495605469, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007769107818603516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008339166641235352, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 38, 41, 34, 40, 33, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.007081031799316406, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 41, 32, 42, 37, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0068051815032958984, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007815122604370117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 42, 38, 33, 36, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"source_path should be an existing, accessible directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007032871246337891, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 40, 32, 33, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008081197738647461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 32, 42], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (str(source_path), results)", "compilation_passed": true, "time": 0.001856088638305664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 32, 39, 33, 35, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).expanduser().resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"Source path must exist and be a directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008442878723144531, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 38, 36, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39, 38, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 39, 40, 41, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008363962173461914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41, 42, 33, 38, 40, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.glob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007552146911621094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 36, 35, 34, 39, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.00764012336730957, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 38, 36, 35, 33, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"Directory {source_path} not found or not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0070950984954833984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 40, 35, 38, 33, 42, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return str(source_path.name), results", "compilation_passed": true, "time": 0.007597208023071289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 41, 37, 42, 32, 35, 40, 39, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f\"{source_path} is not a directory or does not exist!\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.008643865585327148, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 32, 33, 36, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.004745960235595703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 40, 35, 32, 34, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007117033004760742, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 40, 33, 38, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source directory must exist and must be a valid directory\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.relative_to(source_path)))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007074117660522461, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 37, 34, 41, 33, 32, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007009029388427734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 32], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 37, 39, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'Invalid path {source_path}')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008601188659667969, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 32, 41, 34, 33, 36, 37, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy2(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path must be an existing directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007876873016357422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f\"{source_path} does not exist or is not a directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008043050765991211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 41, 34, 39, 42, 33], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(source_path.glob('*'))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.002087831497192383, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 38, 42, 35, 37, 36], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('source_path does not exist or is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.007838964462280273, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 41, 42, 36, 32, 34, 37], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('Path is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = list(map(str, shutil.copy2_file(source_path, destination_path)))\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36, 33, 37, 32, 35, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(f'The given source directory {source_path} does not exist!')\n    destination_path.mkdir(exist_ok=True, parents=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.006876945495605469, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = str(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(entry, destination_path)\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 41], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError('The source path is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(entry, destination_path)\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007184743881225586, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"The source path must be an existing, accessible directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.007899999618530273, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 39, 32, 35, 38], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_file():\n        raise ValueError(f'Given {source_path} is not a directory')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 33, 42, 34, 32, 39, 38, 40], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.exists() or not source_path.is_dir():\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)  # Create parent directories if necessary\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return source_path.name, results", "compilation_passed": true, "time": 0.008098125457763672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 34, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if source_path.is_dir() and source_path.exists():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path))\n    return source_path.name, results", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 41, 37, 39, 34, 35], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError(f'Source path {source_path} does not exist or is not a directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.0016269683837890625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 39, 41, 38, 34], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path).resolve()\n    destination_path = pathlib.Path(destination_path).resolve()\n    if not source_path.is_dir():\n        raise ValueError('source_path must be an existing, accessible directory.')\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.rglob('*'):\n        if entry.is_file():\n            results.append(str(entry.name))\n            shutil.copy(str(entry), str(destination_path / entry.name))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.00547480583190918, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 40, 38, 39], "result": {"code": "import shutil\nimport pathlib\n\n\ndef task_func(source_path, destination_path):\n    \"\"\"\n    Lists files in the specified source directory without descending into subdirectories and copies them to a\n    destination directory.\n\n    Parameters:\n    - source_path (str):      The source directory path to analyze. Must be an existing, accessible directory.\n    - destination_path (str): The destination directory path where files will be copied.\n                              If it does not exist, this function will create it.\n\n    Returns:\n    Tuple[str, List[str]]: A tuple containing the name of the source directory and a list of filenames (not\n                           full paths) that were copied.\n\n    Raises:\n    - ValueError: If source_path does not exist or is not a directory.\n\n    Requirements:\n    - shutil\n    - pathlib\n\n    Example:\n    >>> x = task_func('/Docs/src/Scripts')\n    >>> type(x)\n    <class 'tuple'>\n    >>> x\n    ('Scripts', ['file_1_in_scripts_dir.txt', 'file_2_in_scripts_dir.txt'])\n    \"\"\"\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not (source_path.exists() and source_path.is_dir()):\n        raise ValueError(\"source_path must be an existing directory.\")\n    destination_path.mkdir(parents=True, exist_ok=True)\n    results = []\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            results.append(entry.name)\n            shutil.copy(str(entry), str(destination_path))\n    return (source_path.name, results)", "compilation_passed": true, "time": 0.008234977722167969, "tests_passed": true, "error": null}}
