{"selected_lines": [28, 36, 29, 32, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002046823501586914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 28, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 28, 32, 29, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 31, 34, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014309883117675781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 31, 32, 33, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 32, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008172988891601562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30, 31, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 36, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 36, 31, 28, 30, 29, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 34, 35, 31, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 34, 35, 33, 28, 36, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 28, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 30, 35, 31, 29, 33, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001337289810180664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 29, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006759166717529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007712125778198242, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 28, 31, 34, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013582706451416016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 31, 35, 32, 34, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012841224670410156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008008956909179688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 29, 32, 33, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 34, 32, 35, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0030128955841064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 36, 35, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 34, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 33, 28, 31, 30, 35, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015463829040527344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 31, 36, 32, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 29, 34, 31, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34, 29, 31, 32, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013120174407958984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 30, 29, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 36, 29, 35, 30, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014119148254394531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 34, 33, 36, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 33, 34, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 33, 29, 34, 30, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013082027435302734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 31, 28, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 31, 28, 34, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34, 36, 32, 35, 31, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 31, 30, 32, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 28, 32, 34, 31, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 32, 36, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 29, 34, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0029211044311523438, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 29, 34, 33, 32, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013911724090576172, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 29, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 33, 29, 32, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 33, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012500286102294922, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0027577877044677734, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 36, 28, 31, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0028040409088134766, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 28, 33, 29, 30, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014698505401611328, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 32, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012760162353515625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 31, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 36, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 30, 28, 34, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002972126007080078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 28, 35, 31, 36, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001524209976196289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 30, 35, 34, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 36, 34, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34, 35, 31, 29, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012488365173339844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00789499282836914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 35, 34, 31, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 32, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014309883117675781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 33, 29, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012950897216796875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 34, 36, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013110637664794922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 31, 34, 36, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014519691467285156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0017001628875732422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 29, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016548633575439453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 29, 33, 30, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013418197631835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002046823501586914, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 28, 33, 30, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 36, 28, 32, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 32, 36, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012679100036621094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 32, 35, 33, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001331329345703125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 30, 36, 33, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 33, 31, 28, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32, 35, 31, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 33, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012500286102294922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.011619806289672852, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 35, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008623838424682617, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013458728790283203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 28, 36, 30, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30, 36, 33, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = dict()\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015377998352050781, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 33, 29, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012950897216796875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 29, 32, 31, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014832019805908203, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 29, 32, 34, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013279914855957031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 28, 29, 35, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 31, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35, 31, 28, 29, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 30, 35, 28, 29, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013768672943115234, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 36, 31, 33, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 32, 34, 30, 36, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012791156768798828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 28, 31, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 30, 34, 29, 33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013432502746582031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 33, 35, 29, 30, 34, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 29, 32, 28, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 34, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013477802276611328, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 36, 31, 34, 32, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 31, 33, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 36, 33, 34, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001300811767578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 35, 30, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012469291687011719, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006759166717529297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007378816604614258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 35, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 31, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012977123260498047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 29, 33, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 34, 28, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002997875213623047, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008623838424682617, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 36, 35, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014011859893798828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 28, 32, 29, 34, 31, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 36, 30, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29, 28, 35, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 30, 29, 36, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013539791107177734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 33, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0029768943786621094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014431476593017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 35, 31, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014388561248779297, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 34, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012600421905517578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33, 36, 30, 28, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007712125778198242, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013701915740966797, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 33, 31, 28, 32, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 29, 31, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012848377227783203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 32, 28, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = dict()\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002893209457397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007372140884399414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 28, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009676933288574219, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 29, 30, 34, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0029349327087402344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 35, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 30, 35, 36, 28, 29, 32, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = dict()\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002894163131713867, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36, 33, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015549659729003906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015590190887451172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 35, 31, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 36, 33, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 28, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014088153839111328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 29, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 32, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 28, 31, 30, 35, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015463829040527344, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 28, 33, 32, 31, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 35, 33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 30, 28, 34, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002972126007080078, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 28, 29, 32, 31, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012791156768798828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [35, 28, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013020038604736328, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006927967071533203, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 29, 32, 31, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014832019805908203, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009676933288574219, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 35, 32, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29, 34, 32, 33, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 31, 36, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013723373413085938, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 31, 36, 29, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 32, 28, 36, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 29, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33, 30, 28, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 32, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 36, 33, 28, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 35, 32, 34, 33, 31, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 30, 29, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001302957534790039, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 31, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007378816604614258, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 28, 33, 31, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013048648834228516, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015590190887451172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 35, 33, 31, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 30, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012738704681396484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 36, 34, 35, 33, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 34, 28, 31, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = dict()\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 33, 35, 31, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [33, 29, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 33, 34, 30, 28, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 28, 34, 33, 29, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 35, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 34, 36, 33, 29, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0074901580810546875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 36, 34, 30, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 33, 29, 34, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.011619806289672852, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [36, 30, 28, 35, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013077259063720703, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00789499282836914, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 31, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0017631053924560547, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 34, 28, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001316070556640625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007712125778198242, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35, 33, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 33, 34, 35, 30, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001322031021118164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 28, 32, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 32, 29, 30, 28, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 30, 36, 34, 31, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013089179992675781, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014519691467285156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 32, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 29, 35, 33, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28, 30, 32, 35, 33, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31, 36, 28, 33, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012640953063964844, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 30, 29, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00136566162109375, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00789499282836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 32, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012760162353515625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 28, 31, 30, 35, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015463829040527344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 33, 32, 31, 29, 30, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 34, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 28, 30, 31, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 35, 34, 29, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 28, 30, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013318061828613281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 36, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 35, 29, 33, 36, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015091896057128906, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 29, 35, 30, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001363992691040039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008467912673950195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 30, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012850761413574219, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 28, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 35, 36, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 36, 34, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 36, 34, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 33, 32, 31, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31, 36, 35, 34, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 30, 35, 34, 33, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 30, 33, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 28, 31, 30, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 33, 29, 28, 34, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 28, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 32, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 28, 31, 36, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 32, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 28, 35, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013508796691894531, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 34, 28, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013079643249511719, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008257865905761719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007378816604614258, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 28, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 33, 34, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012559890747070312, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30, 28, 31, 33, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 32, 33, 31, 28, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 29, 34, 33, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00665593147277832, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 33, 34, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012559890747070312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 28, 34, 33, 32, 31, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013561248779296875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 32, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 28, 33, 29, 31, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 36, 34, 31, 33, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013041496276855469, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 35, 31, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 30, 29, 28, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001499176025390625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 36, 32, 31, 30, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002808094024658203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 34, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013842582702636719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012469291687011719, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0074901580810546875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 35, 33, 34, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = dict()\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0030078887939453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 28, 33, 32, 35, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012869834899902344, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001538991928100586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 28, 30, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001458883285522461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 33, 28, 35, 34, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014510154724121094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 32, 30, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 29, 31, 35, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0074901580810546875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012369155883789062, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006700038909912109, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00015783309936523438, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 35, 29, 28, 36, 31, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012691020965576172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 28, 34, 31, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012359619140625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0015668869018554688, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006759166717529297, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 33, 28, 31, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002046823501586914, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 34, 32, 29, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002046823501586914, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 32, 31, 36, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = dict()\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 35, 31, 29, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012488365173339844, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 28, 34, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31, 29, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 36, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 30, 28, 34, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002972126007080078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008008956909179688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 33, 35, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 28, 35, 30, 31, 29, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013058185577392578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 28, 34, 33, 32, 31, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013561248779296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001538991928100586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 28, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 35, 33, 30, 34, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 33, 32, 31, 34, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 28, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008186101913452148, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [34, 32, 35, 31, 30, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 35, 32, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008172988891601562, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 31, 34, 30, 32, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006927967071533203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 31, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0017631053924560547, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 28, 34, 33, 32, 31, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013561248779296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 32, 31, 34, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 35, 31, 32, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001294851303100586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 28, 35, 31, 36, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001524209976196289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 34, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002973794937133789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 29, 32, 35, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 32, 29, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0074901580810546875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 28, 33, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 32, 31, 28, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007065773010253906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 28, 32, 35, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 28, 30, 33, 29, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 29, 34, 28, 31, 35, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 33, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012500286102294922, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 33, 35, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012500286102294922, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00015783309936523438, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 29, 35, 28, 30, 31, 33, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012929439544677734, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [29, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013151168823242188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 33, 32, 31, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 33, 34, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012600421905517578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 28, 30, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 32, 28, 36, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 36, 31, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012600421905517578, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007065773010253906, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 34, 33, 36, 28, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012760162353515625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 30, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 33, 32, 31, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 28, 29, 30, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012929439544677734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 30, 36, 29, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014019012451171875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 32, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014920234680175781, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 33, 36, 31, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006700038909912109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 28, 30, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 28, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001271963119506836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0028829574584960938, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 28, 33, 35, 32, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 30, 32, 31, 29, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013179779052734375, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 31, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009676933288574219, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 31, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006759166717529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 34, 31, 36, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 35, 32, 31, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008623838424682617, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 29, 33, 34, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 34, 32, 35, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0030128955841064453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 32, 35, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001531839370727539, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [35, 34, 31, 29, 33, 32, 36, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 31, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0029120445251464844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29, 34, 36, 28, 31, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 29, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012938976287841797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 30, 28, 31, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006927967071533203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 33, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013110637664794922, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 28, 32, 34, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 31, 28, 29, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 36, 30, 35, 29, 28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013496875762939453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 34, 33, 36, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013098716735839844, "tests_passed": true, "error": null}}
{"selected_lines": [30, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 36, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 30, 34, 32, 29, 35, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 33, 29, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 36, 35, 31, 28, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006700038909912109, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 29, 35, 31, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 34, 29, 33, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 32, 28, 35, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 28, 31, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012967586517333984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 28, 29, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 28, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012729167938232422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 29, 35, 28, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014371871948242188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 28, 29, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012919902801513672, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001294851303100586, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 33, 32, 31, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 29, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 28, 32, 36, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0034890174865722656, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 36, 34, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009676933288574219, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 28, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001271963119506836, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 36, 35, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014011859893798828, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 35, 29, 33, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013039112091064453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [31, 32, 28, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 35, 36, 32, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 31, 30, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012903213500976562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 30, 32, 34, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 29, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016548633575439453, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 33, 29, 34, 30, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013082027435302734, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 35, 34, 36, 29, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.003410816192626953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 32, 36, 33, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 29, 30, 34, 36, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\\\(.*?)\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 34, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014889240264892578, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014309883117675781, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008257865905761719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 32, 30, 34, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001306295394897461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 30, 29, 28, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001499176025390625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008172988891601562, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 35, 36, 29, 33, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 36, 32, 30, 33, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30, 34, 29, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 34, 28, 32, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 35, 33, 32, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0077822208404541016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 29, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016548633575439453, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008257865905761719, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 28, 35, 36, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 30, 29, 35, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012810230255126953, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00665593147277832, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 32, 30, 35, 29, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 30, 35, 33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = [p for p in Path(directory_path).glob(FILE_PATTERN)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 35, 31, 30, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 36, 29, 32, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008257865905761719, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012941360473632812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 34, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013477802276611328, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 30, 36, 33, 35, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 32, 34, 29, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016300678253173828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00665593147277832, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 33, 30, 34, 32, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006330013275146484, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008732795715332031, "tests_passed": false, "error": "IsADirectoryError"}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.009041786193847656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 29, 36, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 29, 35, 30, 28, 33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001386880874633789, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007065773010253906, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 36, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 34, 32, 31, 29, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 32, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 28, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012829303741455078, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007712125778198242, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 35, 34, 36, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 34, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29, 36, 35, 31, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014011859893798828, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 28, 36, 32, 33, 29, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012691020965576172, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008257865905761719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 29, 36, 33, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012540817260742188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 36, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013723373413085938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [28, 29, 34, 32, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007318019866943359, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 28, 29, 31, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012781620025634766, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 35, 34, 28, 31, 29, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00789499282836914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 36, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 30, 32, 36, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*\\\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012760162353515625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 28, 31, 36, 32, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 29, 35, 30, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = dict()\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0028111934661865234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 32, 36, 29, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>from collections import defaultdict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 30, 28, 34, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + \"/\" + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 29, 33, 28, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 28, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00015783309936523438, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30, 35, 33, 36, 31, 32, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 30, 29, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 30, 33, 36, 32, 34, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Recursive pattern to get all text files\n    match_dict = dict()\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0031690597534179688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 34, 32, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 36, 34, 35, 28, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 29, 34, 31, 33, 28, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'  # Matches all files with extension .txt.\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 35, 31, 29, 34, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 29, 28, 31, 32, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013382434844970703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 31, 28, 34, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014438629150390625, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 28, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(f\"{directory_path}/{FILE_PATTERN}\")\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0074901580810546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 30, 33, 29, 32, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 29, 34, 28, 36, 30, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 30, 31, 29, 33, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 30, 35, 28, 31, 29], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013539791107177734, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 32, 36, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '**/*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006402015686035156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 29, 31, 36, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = dict()\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 34, 30, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.002973794937133789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 34, 31, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007118940353393555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29, 32, 31, 30, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 32, 33, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>\"\"\"", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014481544494628906, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006631135940551758, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 28, 31, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>def task_func(list_of_nums: list, num: int = 1) -> list:", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008172988891601562, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*' + regex_pattern + r'.*'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007950782775878906, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32, 36, 33, 34, 30, 35, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict<|endoftext|>#", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007932186126708984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014989376068115234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006700038909912109, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 32, 30, 33, 34, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import json", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 28, 34, 35, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013031959533691406, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 29, 32, 33, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 30, 36, 34, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 32, 29, 36, 28, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = dict()\n    file_paths = glob.glob(Path(directory_path).joinpath(FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 31, 28, 33, 32, 36], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = f'*.{re.compile(r\".+\\.txt$\").search(os.path.basename(directory_path)).string}'\n    match_dict = dict()\n    file_paths = [\n    for file_path in file_paths:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 34], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Pattern for finding text files\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict<|endoftext|>import unittest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006700038909912109, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 32, 36, 34, 28, 33], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + os.sep + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012922286987304688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 28, 32, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001455068588256836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00952005386352539, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'[^a-zA-Z]+([^0-9].+?[^0-9])[^a-zA-Z0-9]+([0-9]+)[^0-9].+?[^0-9](.+?[0-9]{4})[^0-9].+?[^0-9](.+?[0-9]+[^0-9].+?[^0-9][^0-9]+[^0-9])[^0-9].+?[^0-9]([^0-9]+)[^0-9].+?[^0-9]([0-9]+).+?[^0-9]([0-9]+)\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [35, 31, 33, 34, 36, 29, 30, 28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.*.txt'\n    match_dict = dict()\n    file_paths = [Path(f).absolute() for f in glob.glob(f'{directory_path}/{FILE_PATTERN}', recursive=True)]\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 30, 29, 28, 33, 35], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(f'{directory_path}/**/{FILE_PATTERN}', recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001499176025390625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 32, 35, 33, 28, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '\\\\' + FILE_PATTERN)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.001331329345703125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 28, 33, 32, 31, 34, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r'.*\\.txt$'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 28, 30, 36, 34, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = \"**/*.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 29, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = dict()\n    file_paths = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0012710094451904297, "tests_passed": true, "error": null}}
{"selected_lines": [28, 35, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 28, 30, 31], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'  # Text files pattern to match\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007137775421142578, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.+'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.006402015686035156, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 32, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = list(glob.glob(directory_path + FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path) as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0013148784637451172, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = r\".*\\.txt\"\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.008020162582397461, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '*.txt'\n    match_dict = {}\n    file_paths = glob.glob(directory_path + '/' + FILE_PATTERN, recursive=False)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).stem] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0014989376068115234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 29, 28, 33, 32], "result": {"code": "import re\nimport os\nfrom pathlib import Path\nimport glob\n\n\ndef task_func(directory_path: str, regex_pattern: str = r'\\\\(.+?\\\\)|\\\\w') -> dict:\n    \"\"\"\n    Extracts matches from all text files in a specified directory based on a regular expression pattern. \n    It captures whatever is between parentheses as a single match, and any character outside the parentheses \n    as individual matches in the string.\n\n    Parameters:\n    - directory_path (str): The path to the directory containing the text files.\n    - regex_pattern (str): The regular expression pattern to use for matching. Defaults to REGEX_PATTERN.\n\n    Returns:\n    - dict: A dictionary where keys are file names (without path) and values are lists of matches extracted from the files.\n\n    Requirements:\n    - Utilizes libraries: re, os, pathlib.Path, and glob.glob\n\n    Example:\n    >>> matches = task_func('/path/to/directory') # Test with fictional directory path\n    >>> print(matches)\n    {}\n    \"\"\"\n    # Constants\n    FILE_PATTERN = '.'\n    match_dict = {}\n    file_paths = glob.glob(os.path.join(directory_path, FILE_PATTERN))\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            content = file.read()\n            matches = re.findall(regex_pattern, content)\n            match_dict[Path(file_path).name] = matches\n    return match_dict", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
