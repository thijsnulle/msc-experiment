{"selected_lines": [29, 36, 35, 32, 31, 37, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.02192091941833496, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 33, 36, 34, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 31, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017600059509277344, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01914191246032715, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 38, 36, 37, 31, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016677379608154297, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 29, 38, 30, 36, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01839900016784668, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03676867485046387, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818917274475098, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 38, 34, 37, 30, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018561124801635742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 37, 31, 30, 36, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019694089889526367, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01157689094543457, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793692588806152, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038130998611450195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018733978271484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017099380493164062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 33, 37, 35, 31, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018934011459350586, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 37, 38, 33, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001878976821899414, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 30, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01773977279663086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33, 30, 37, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018002986907958984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 38, 34, 32, 30, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019860267639160156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 31, 29, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 29, 36, 34, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.020025968551635742, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 33, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016510486602783203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 37, 29, 36, 34, 38, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 30, 29, 34, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019170761108398438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 38, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019378662109375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 29, 34, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 33, 37, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016529560089111328, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 31, 32, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01824188232421875, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0075228214263916016, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 38, 33, 32, 35, 34, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018739938735961914, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 29, 34, 31, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018584012985229492, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 37, 33, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018388986587524414, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 29, 33, 37, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 38, 31, 36, 30, 35, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012497901916503906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 30, 31, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.003100872039794922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35, 34, 36, 37, 31, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017418861389160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 36, 38, 29, 37, 33, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0075228214263916016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 38, 35, 32, 33, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018844127655029297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 31, 34, 36, 29, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012567758560180664, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 37, 31, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018877744674682617, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 33, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 38, 33, 36, 30, 32, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018570423126220703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 30, 36, 32, 38, 34, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0026199817657470703, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 36, 31, 30, 33, 34, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001692056655883789, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 36, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 36, 31, 34, 37, 29, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018255949020385742, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038108110427856445, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 30, 38, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794360160827637, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 31, 34, 30, 32, 33, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018695354461669922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 37, 29, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018637895584106445, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 36, 30, 35, 32, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 29, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018340110778808594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 36, 32, 37, 38, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019668102264404297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 32, 36, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807999610900879, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 30, 38, 33, 35, 32, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018909931182861328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012367725372314453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 31, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 30, 36, 32, 38, 29, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012265920639038086, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 37, 29, 34, 31, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019572973251342773, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 34, 38, 29, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 34, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001795053482055664, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01825094223022461, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818917274475098, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 37, 33, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0189669132232666, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 31, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017440319061279297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 38, 32, 36, 29, 30, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 35, 32, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016810894012451172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793692588806152, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 34, 32, 38, 31, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01862192153930664, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 30, 36, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019450187683105469, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03684186935424805, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 38, 29, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017967939376831055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 37, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018883943557739258, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 38, 34, 29, 36, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017592191696166992, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 31, 30, 29, 38, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 29, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30, 34, 29, 33, 38, 31, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018918752670288086, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 29, 33, 34, 36, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 32, 29, 33, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018271923065185547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 31, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01283407211303711, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 37, 36, 32, 31, 30, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016641616821289062, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 32, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 34, 31, 38, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 30, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018324851989746094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 30, 36, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 38, 35, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019221305847167969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 29, 33, 34, 30, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018832921981811523, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 34, 37, 31, 33, 30, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 31, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018782854080200195, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 37, 33, 34, 32, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017822980880737305, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 30, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002568960189819336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 31, 29, 32, 35, 30, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012640953063964844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35, 37, 31, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017130374908447266, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 37, 31, 35, 38, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018596649169921875, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 36, 33, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0030939579010009766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 37, 35, 38, 36, 31, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 29, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 29, 36, 34, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.020025968551635742, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 38, 31, 36, 37, 32, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017652511596679688, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 38, 32, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0027718544006347656, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 38, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0028917789459228516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 37, 34, 36, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018050670623779297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01828289031982422, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 29, 34, 37, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01889801025390625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 35, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018630027770996094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 30, 38, 32, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01840806007385254, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018790006637573242, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 32, 31, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 30, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018324851989746094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 31, 34, 32, 30, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807379722595215, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 29, 36, 31, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 35, 36, 34, 33, 30, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018890857696533203, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37, 34, 36, 38, 29, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 38, 36, 35, 30, 29, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011864185333251953, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 29, 34, 35, 37, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012707710266113281, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03815817832946777, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 37, 35, 34, 38, 31, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01920795440673828, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017418861389160156, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 38, 36, 34, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001592874526977539, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 32, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 29, 36, 30, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 33, 35, 36, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 35, 32, 30, 33, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001600027084350586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 36, 32, 38, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 30, 34, 38, 36, 35, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017905235290527344, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01963496208190918, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 33, 36, 30, 38, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018426895141601562, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 30, 29, 32, 36, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002975940704345703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31, 33, 38, 34, 29, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.00168609619140625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 37, 33, 35, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01205301284790039, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 37, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018181800842285156, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 38, 34, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018289804458618164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 33, 32, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 29, 34, 30, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011909961700439453, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 30, 34, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 34, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018520832061767578, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017330646514892578, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03726911544799805, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 38, 31, 36, 30, 35, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012497901916503906, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017430782318115234, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03763389587402344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 34, 30, 37, 38, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016591548919677734, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037320852279663086, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 33, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017853260040283203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 35, 38, 32, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 33, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011766910552978516, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35, 31, 32, 36, 33, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002672910690307617, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 32, 37, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017919540405273438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 38, 29, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019025087356567383, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 37, 38, 35, 34, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 36, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017371177673339844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 38, 35, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01891303062438965, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 38, 31, 35, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01193094253540039, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 30, 34, 31, 37, 36, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 31, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 34, 37, 31, 30, 36, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0027692317962646484, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 37, 29, 32, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0123748779296875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0020020008087158203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33, 37, 35, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001873016357421875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 38, 33, 31, 32, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29, 36, 35, 30, 38, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0185699462890625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 36, 30, 32, 35, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 29, 33, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017889022827148438, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29, 32, 34, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019137144088745117, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007759809494018555, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 38, 33, 29, 30, 34, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017399787902832031, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 36, 38, 34, 31, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 37, 30, 32, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 29, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.00180816650390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 33, 36, 30, 38, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011587142944335938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 38, 30, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01193690299987793, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037320852279663086, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793692588806152, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 29, 35, 31, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017971992492675781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 32, 37, 31, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018861055374145508, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 30, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 37, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001833200454711914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018128156661987305, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 35, 37, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 38, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01253509521484375, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01839613914489746, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018616199493408203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018145084381103516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 32, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017757415771484375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 30, 29, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018718957901000977, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03819394111633301, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 37, 29, 32, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 29, 30, 32, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01914191246032715, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01864004135131836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 35, 32, 30, 36, 31, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0075228214263916016, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379328727722168, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 34, 36, 32, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 33, 29, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 35, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001806020736694336, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 36, 29, 31, 35, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018786907196044922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 37, 31, 38, 36, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018558025360107422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 38, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01825571060180664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 38, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019021987915039062, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 31, 33, 36, 37, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 34, 32, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 29, 31, 35, 38, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018379688262939453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 33, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017739057540893555, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018520832061767578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 35, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017418861389160156, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 37, 32, 31, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018307209014892578, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018887758255004883, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018800020217895508, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01841902732849121, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 31, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 37, 29, 36, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01158285140991211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01178598403930664, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03726911544799805, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 35, 33, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0179750919342041, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018973827362060547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 38, 29, 36, 32, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 36, 38, 32, 37, 31, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 31, 30, 35, 29, 38, 36, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0075228214263916016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 38, 30, 33, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018845796585083008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 37, 36, 30, 29, 33, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017328262329101562, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03815817832946777, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 32, 33, 35, 31, 34, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01851797103881836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 29, 31, 33, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012936830520629883, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 35, 31, 33, 36, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001796722412109375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 33, 32, 30, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38, 37, 36, 34, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 34, 33, 37, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01856684684753418, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01816391944885254, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 38, 37, 31, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01897597312927246, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017928123474121094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 31, 29, 34, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0191800594329834, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 33, 31, 37, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 30, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017657279968261719, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03815817832946777, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794407844543457, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 34, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016620159149169922, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 29, 35, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016798973083496094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 35, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012055158615112305, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 31, 29, 34, 38, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018309831619262695, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [36, 37, 30, 34, 35, 31, 32, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 29, 31, 34, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 29, 36, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01838397979736328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37, 29, 35, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018393754959106445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 38, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018836259841918945, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 33, 34, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 38, 32, 31, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 32, 38, 29, 35, 34, 33, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017232894897460938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 34, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.05533099174499512, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 29, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012857198715209961, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018552780151367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793931007385254, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019638776779174805, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 33, 36, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 35, 30, 33, 31, 38, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002649068832397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 38, 32, 31, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001664876937866211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 35, 36, 33, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0193178653717041, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 32, 30, 35, 34, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018460750579833984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 36, 32, 38, 34, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0026199817657470703, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.009773969650268555, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 37, 32, 31, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01883530616760254, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018815994262695312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 29, 37, 30, 33, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 29, 30, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017728805541992188, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 38, 30, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 32, 33, 31, 30, 38, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03676867485046387, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0375978946685791, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 36, 35, 33, 29, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 37, 35, 34, 29, 33, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016717910766601562, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03815817832946777, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017920970916748047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 31, 34, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 35, 34, 36, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 35, 36, 38, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037783145904541016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 31, 32, 29, 37, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01955103874206543, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30, 37, 36, 38, 31, 32, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 36, 31, 34, 37, 29, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018255949020385742, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794407844543457, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 29, 31, 36, 30, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 30, 34, 32, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016529560089111328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 36, 37, 30, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012329816818237305, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 30, 31, 29, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01281285285949707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01788496971130371, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03726911544799805, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 36, 37, 30, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012329816818237305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 36, 34, 35, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01157689094543457, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017920970916748047, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 30, 37, 34, 31, 29, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017729997634887695, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793931007385254, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 29, 31, 30, 34, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016798973083496094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 31, 38, 34, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019594907760620117, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 38, 37, 31, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01853013038635254, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38, 34, 29, 31, 36, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 36, 32, 33, 38, 34, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 38, 32, 35, 36, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01910400390625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 30, 29, 38, 35, 31, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 33, 32, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017757415771484375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 31, 32, 30, 36, 37, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017714977264404297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 38, 31, 36, 30, 35, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012497901916503906, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038108110427856445, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 38, 37, 34, 32, 36, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019260168075561523, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 32, 36, 31, 38, 33, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 33, 35, 31, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 35, 29, 38, 31, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01907825469970703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 29, 36, 31, 32, 30, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0175020694732666, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 33, 36, 30, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019177913665771484, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03646278381347656, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 36, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01829981803894043, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018598079681396484, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018496036529541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 35, 33, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01146388053894043, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 31, 34, 29, 35, 37, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 34, 35, 31, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012814044952392578, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 29, 32, 35, 37, 31, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03752493858337402, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 29, 38, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 38, 37, 36, 31, 30, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 32, 30, 34, 37, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 35, 36, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 29, 35, 31, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017971992492675781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 30, 38, 33, 35, 32, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018909931182861328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 30, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 30, 33, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018316030502319336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 36, 32, 37, 30, 31, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 35, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018680095672607422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018488645553588867, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 29, 34, 35, 32, 36, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 38, 29, 30, 36, 33, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 37, 30, 33, 32, 38, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 29, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 33, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012367725372314453, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 32, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017879009246826172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 38, 36, 35, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01921391487121582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 34, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01729583740234375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03679394721984863, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 34, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001734018325805664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 33, 32, 38, 35, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 36, 32, 35, 38, 30, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379328727722168, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 31, 33, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001956939697265625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018511056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 32, 38, 33, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 35, 37, 34, 31, 30, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 36, 38, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 31, 29, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001725912094116211, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 33, 34, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0025069713592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 33, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017853260040283203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 37, 38, 36, 32, 31, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019154071807861328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01752185821533203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 32, 38, 36, 33, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019371986389160156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 33, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 38, 34, 29, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011706829071044922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019681453704833984, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 32, 31, 38, 29, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 36, 31, 38, 37, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01864910125732422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 29, 38, 33, 35, 31, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017712116241455078, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794360160827637, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 33, 31, 36, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 32, 35, 33, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012211084365844727, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 30, 37, 35, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017352104187011719, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 37, 38, 35, 31, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 29, 33, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01743602752685547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 33, 34, 38, 30, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 38, 34, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016891956329345703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 38, 31, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 37, 30, 31, 38, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018620967864990234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018936872482299805, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 38, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 29, 38, 33, 35, 31, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017712116241455078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018999576568603516, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 31, 35, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017910003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 29, 38, 36, 34, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018505334854125977, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 38, 35, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019221305847167969, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 29, 35, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794407844543457, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 38, 36, 37, 34, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001847982406616211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.008859872817993164, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 38, 36, 37, 34, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001847982406616211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 37, 30, 35, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017261505126953125, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 34, 35, 33, 29, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019749879837036133, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 30, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001806020736694336, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 32, 36, 35, 37, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016536712646484375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 33, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018301010131835938, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 31, 38, 37, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011506080627441406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 37, 33, 31, 35, 30, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 37, 33, 30, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019073009490966797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 34, 32, 31, 29, 35, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011574745178222656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 30, 31, 34, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 31, 35, 36, 33, 37, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019278287887573242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01914191246032715, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01209115982055664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 29, 37, 32, 34, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379941463470459, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 37, 29, 30, 32, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 30, 31, 33, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01842784881591797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 32, 30, 36, 35, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017879009246826172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017421245574951172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 35, 34, 31, 38, 36, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0196990966796875, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 29, 31, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01788187026977539, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018649101257324219, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.039298057556152344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 31, 38, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018277168273925781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 38, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017720937728881836, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 33, 34, 38, 30, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 33, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017853260040283203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018800020217895508, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017499923706054688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019175291061401367, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 34, 29, 35, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 33, 36, 34, 29, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01162409782409668, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 29, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019330978393554688, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016813278198242188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007759809494018555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 37, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017347335815429688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019355297088623047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 29, 33, 36, 35, 37, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018836259841918945, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037587881088256836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 33, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018711090087890625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038108110427856445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 37, 31, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018043041229248047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 31, 29, 34, 38, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018309831619262695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 33, 31, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016791820526123047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 29, 30, 36, 32, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012920141220092773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 32, 29, 35, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011591911315917969, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 29, 35, 37, 34, 38, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018968582153320312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 29, 31, 35, 34, 36, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 37, 30, 36, 31, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018393754959106445, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 33, 36, 32, 34, 30, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017499923706054688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 38, 36, 37, 31, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016677379608154297, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 31, 38, 32, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012929916381835938, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 37, 38, 34, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017679929733276367, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 37, 33, 35, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 36, 38, 35, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012885093688964844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 37, 34, 29, 32, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017101764678955078, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 36, 35, 34, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 31, 33, 35, 36, 32, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793931007385254, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 30, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 30, 35, 33, 36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 32, 35, 33, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037921905517578125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012929916381835938, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 33, 34, 38, 30, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01258087158203125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037589073181152344, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 36, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018075942993164062, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 37, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038130998611450195, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 32, 29, 36, 34, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019006967544555664, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011948108673095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 30, 33, 31, 36, 29, 35, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 37, 29, 32, 31, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 29, 32, 30, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0020380020141601562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019681453704833984, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017884016036987305, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 30, 36, 37, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012737035751342773, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379941463470459, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 38, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379328727722168, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 35, 30, 37, 38, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018987655639648438, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017337799072265625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017218589782714844, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 31, 29, 32, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017668962478637695, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 36, 34, 31, 30, 35, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016980171203613281, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03726911544799805, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 38, 29, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012305021286010742, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 38, 33, 30, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 37, 30, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002969026565551758, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012929916381835938, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 34, 31, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01837325096130371, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038108110427856445, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.009773969650268555, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 29, 36, 37, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012466192245483398, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 33, 36, 34, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018019676208496094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 31, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 33, 38, 31, 36, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012085199356079102, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 34, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018520116806030273, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 34, 31, 36, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017647743225097656, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 37, 35, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01916813850402832, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018877983093261719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 33, 29, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 34, 35, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 30, 31, 34, 29, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019099712371826172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 29, 37, 36, 38, 35, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018091201782226562, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03752493858337402, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018800020217895508, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 29, 31, 33, 36, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001725912094116211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 32, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017268657684326172, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03752493858337402, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 36, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018353939056396484, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 31, 36, 30, 29, 37, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018619060516357422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 33, 36, 37, 38, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016961097717285156, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018980979919433594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 30, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 37, 38, 36, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 31, 36, 35, 32, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01843571662902832, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37, 31, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019107818603515625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 33, 31, 35, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 36, 35, 34, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03757882118225098, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 37, 38, 33, 34, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 32, 30, 34, 31, 36, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0026350021362304688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 35, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018619060516357422, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 38, 35, 36, 37, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018754959106445312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 34, 31, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011941909790039062, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 31, 35, 36, 33, 37, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019278287887573242, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [29, 30, 34, 32, 31, 37, 33, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 35, 38, 31, 32, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01910400390625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012929916381835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793931007385254, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 32, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017728805541992188, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 31, 38, 30, 35, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018703222274780273, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 29, 32, 36, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017799854278564453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 31, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037783145904541016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30, 32, 33, 31, 35, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019009113311767578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 38, 35, 30, 33, 36, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 33, 34, 37, 29, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 32, 31, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 31, 29, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001725912094116211, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 29, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.00185394287109375, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018162012100219727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 30, 29, 31, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018107891082763672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 31, 34, 37, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012462139129638672, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 31, 32, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001668691635131836, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.009996891021728516, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 38, 34, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 31, 30, 33, 36, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016777515411376953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 37, 30, 36, 35, 33, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017049312591552734, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 36, 32, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01949596405029297, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 34, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018202781677246094, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 38, 34, 32, 30, 37, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01883387565612793, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 37, 38, 35, 33, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793692588806152, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 30, 29, 32, 36, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038108110427856445, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04070305824279785, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018800020217895508, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017099380493164062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 31, 32, 29, 33, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018271923065185547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 37, 32, 35, 31, 33, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016536712646484375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 32, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017330646514892578, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33, 38, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 34, 32, 31, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018683910369873047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 38, 37, 29, 36, 30, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 36, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01829981803894043, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 29, 34, 30, 38, 37, 33, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0031850337982177734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 36, 31, 30, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017782211303710938, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 30, 37, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017061233520507812, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 36, 35, 34, 33, 29, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016639232635498047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 36, 29, 32, 35, 37, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01905679702758789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017969846725463867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 35, 37, 32, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 37, 29, 35, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 31, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 31, 30, 37, 38, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03726911544799805, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 36, 37, 32, 31, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01793813705444336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 33, 29, 30, 31, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017728805541992188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 38, 32, 37, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 37, 35, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018471956253051758, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03680825233459473, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 29, 31, 38, 37, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012923955917358398, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 31, 29, 30, 36, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018817901611328125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 38, 35, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01891303062438965, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 33, 38, 29, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002048015594482422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 32, 31, 30, 33, 37, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 32, 38, 29, 34, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018244266510009766, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.039298057556152344, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379941463470459, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037539005279541016, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818917274475098, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 37, 36, 38, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012223958969116211, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037587881088256836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002560853958129883, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 30, 36, 34, 37, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018600940704345703, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.037921905517578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03794360160827637, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018191337585449219, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 30, 35, 31, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018558502197265625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 37, 34, 33, 32, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 30, 32, 31, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 34, 30, 38, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018260478973388672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 37, 34, 29, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017924070358276367, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017180442810058594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 38, 31, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012108087539672852, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 32, 34, 31, 38, 29, 37, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 37, 34, 31, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0027751922607421875, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04229617118835449, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.002794027328491211, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 37, 36, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 32, 37, 35, 36, 31, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016770362854003906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 29, 31, 38, 37, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012923955917358398, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0195009708404541, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 33, 37, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017739057540893555, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 33, 37, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01830577850341797, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379941463470459, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 36, 33, 31, 38, 37, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017299652099609375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018277883529663086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 32, 31, 36, 35, 33, 38, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019594907760620117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 29, 38, 33, 34, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017931699752807617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 35, 36, 31, 30, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 31, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 36, 31, 35, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 29, 36, 31, 32, 30, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0175020694732666, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 37, 35, 30, 34, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 38, 29, 33, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011955022811889648, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001748800277709961, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.013000965118408203, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [33, 31, 30, 36, 32, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 32, 30, 29, 31, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012584209442138672, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 36, 30, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01815009117126465, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 36, 38, 29, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018270015716552734, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03818106651306152, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 32, 29, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018156051635742188, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018729209899902344, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37, 31, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019107818603515625, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007603168487548828, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 37, 38, 32, 29, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0028162002563476562, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 38, 31, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 35, 31, 34, 37, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() == False or Path(target_dir).exists() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 29, 32, 34, 31, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017657279968261719, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 32, 30, 35, 38, 29, 34, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016939640045166016, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 38, 31, 32, 37, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.009854793548583984, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 34, 31, 36, 30, 37, 35, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0016679763793945312, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 29, 30, 31, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 33, 37, 36, 35, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01852273941040039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 35, 29, 34, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012857198715209961, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 37, 36, 31, 38, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807999610900879, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 30, 34, 31, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012933015823364258, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03684186935424805, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018558025360107422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32, 30, 36, 37, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.036546945571899414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017982959747314453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007180690765380859, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 29, 34, 31, 33, 36, 30, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01870584487915039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 30, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017528533935546875, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.007603168487548828, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 37, 34, 29, 38, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017924070358276367, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0379941463470459, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 37, 31, 34, 33, 30, 29, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 29, 33, 37, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.017889022827148438, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 36, 34, 32, 33, 37, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, Path(target_dir) + Path(extension))\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 31, 33, 35, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018301010131835938, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03696274757385254, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 35, 33, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012269973754882812, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01853799819946289, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 29, 35, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.020469188690185547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 34, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.038130998611450195, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 38, 33, 35, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03803682327270508, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 31, 33, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 36, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017371177673339844, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03907513618469238, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35, 31, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.012393951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 29, 35, 37, 30, 31, 36, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019502639770507812, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 37, 34, 32, 30, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01807403564453125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011948108673095703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 35, 32, 30, 36, 31, 37, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01787281036376953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 29, 30, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0020508766174316406, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 30, 36, 38, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f\"*.{extension}\"):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017430782318115234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29, 38, 32, 31, 35, 33, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 31, 29, 35, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001725912094116211, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 36, 34, 30, 31, 33, 32, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"Directory %s does not exist\" % source_dir)\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>import os", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 38, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count<|endoftext|>from collections import Counter", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 36, 31, 34, 37, 29, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018255949020385742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 37, 31, 38, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019107818603515625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001878976821899414, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 32, 33, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>#!/usr/bin/env python", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 34, 33, 30, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 29, 35, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|># ------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 35, 34, 38, 36, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir must exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, f'{target_dir}{file_name.stem}{file_name.suffix}')\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0025680065155029297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 30, 35, 33, 32, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError('source_dir is not a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.00179290771484375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 31, 29, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001775979995727539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 33, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 29, 35, 30, 31, 34, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), str(Path(target_dir) / file_name.stem))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0028963088989257812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 31, 30, 29, 34, 36, 35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019170761108398438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 37, 32, 34, 29, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not (Path(source_dir).exists() and Path(target_dir).exists()):\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in os.listdir(source_dir):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 34, 38, 29, 30, 36, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"Invalid source directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018665075302124023, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03752493858337402, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35, 38, 31, 30, 34, 36, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01854705810546875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0283510684967041, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir() or not Path(target_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03819394111633301, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 31, 30, 36, 35, 34, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0018198490142822266, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 38, 29, 34, 33, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*.{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 37, 38, 30, 29, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01749420166015625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 30, 29, 32, 34, 38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'**/*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019062042236328125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 36, 31, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01774287223815918, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 37, 33, 29, 38, 32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.01884603500366211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 34, 29, 38], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() is False:\n        raise ValueError(f'Source directory does not exist: {source_dir}')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 36, 38, 35, 31, 29, 37, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not os.path.exists(source_dir):\n        raise ValueError('source_dir does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob('*' + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018599987030029297, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 33, 29, 35, 38, 34, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f'The source_dir {source_dir} does not exist')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"*\" + extension):\n            shutil.move(file_name, f\"{target_dir}{file_name}\")\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 38, 34, 36, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures.doubly_linked_list import DoublyLinkedList, ListNode", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 29, 34], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(f\"Source directory does not exist: {source_dir}\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.019680023193359375, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir, file_name.name))\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.04237008094787598, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('Source path is invalid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03763389587402344, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 31, 30, 36, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('The source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count<|endoftext|>from data_structures_and_algorithms_100.data_structures.hashtable.hashtable import Hashtable", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 35, 37, 34, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).exists() and Path(target_dir).exists():\n        raise ValueError('The source directory does not exist.')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 36, 34, 38, 30, 35, 32, 33], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir should exist\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011374950408935547, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03899693489074707, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 29, 35, 34, 33, 30, 32, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).rglob(extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0017931461334228516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 31, 36, 34, 32, 30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError('source_dir must be a directory')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(\"**/*\" + extension):\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.018990755081176758, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 36, 38, 34, 35, 33, 31, 37], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError('source_dir not valid')\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, Path(target_dir))\n            count += 1\n    return count<|endoftext|>from ...abstract_solver import AbstractSolver", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 30, 33, 35, 29, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).is_dir():\n        raise ValueError(\"Source directory does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).iterdir():\n            shutil.move(file_name, target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.011322021484375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 34, 29, 31], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists() or not Path(target_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(extension):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.001734018325805664, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if Path(source_dir).is_dir() == False:\n        raise ValueError\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03793931007385254, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist.\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(str(file_name), target_dir)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.03617095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [38, 29, 30, 36], "result": {"code": "import shutil\nfrom pathlib import Path\nfrom typing import List\n\ndef task_func(source_dir: str, target_dir: str, extensions: List[str]) -> int:\n    '''\n    Move all files with certain extensions from one directory to another.\n\n    Parameters:\n    - source_dir (str): The directory containing the source files.\n    - target_dir (str): The directory to which the files should be moved.\n    - extensions (List[str]): The list of file extensions to be moved.\n\n    Returns:\n    int: The number of moved files.\n\n    Raises:\n    - ValueError: If source_dir or target_dir does not exist.\n\n    Requirements:\n    - shutil\n    - pathlib.Path\n\n    Example:\n    >>> task_func('path/to/source/', 'path/to/target/', ['.jpg', '.png', '.gif'])\n    15\n    >>> task_func('path/to/source/', 'path/to/target/', ['.txt'])\n    1\n    '''\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} is not a directory\")\n    if Path(target_dir).is_dir() == False:\n        raise ValueError(\"target_dir does not exist.\")\n    count = 0\n    for extension in extensions:\n        for file_name in Path(source_dir).glob(f'*{extension}'):\n            shutil.move(file_name, Path(target_dir).joinpath(file_name.name))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0187680721282959, "tests_passed": true, "error": null}}
