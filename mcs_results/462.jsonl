{"selected_lines": [45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 39, 41, 45, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 41, 39, 44, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 38, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 55, 38, 39, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame()\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 44, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 45, 44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 38, 40, 39, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1, received {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 50, 55, 44, 39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 53, 52, 50, 44, 38, 45, 39, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.057665109634399414, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 45, 39, 52, 50, 40, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 44, 50, 39, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 50, 45, 52, 53, 38, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 45, 38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 44, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 41, 44, 53, 52, 50, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 44, 38, 45, 40, 39, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 39, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 55, 38, 44, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021112918853759766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 39, 38, 53, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.056947946548461914, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 45, 39, 52, 50, 40, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 44, 50, 39, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 50, 45, 52, 53, 38, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 45, 38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 44, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 41, 44, 53, 52, 50, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 44, 38, 45, 40, 39, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 39, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 55, 38, 44, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021112918853759766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 39, 38, 53, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.056947946548461914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [53, 41, 38, 45, 50, 44, 40, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 45, 44, 53, 38, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 41, 55, 38, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05693793296813965, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 45, 39, 52, 50, 40, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 44, 50, 39, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 50, 45, 52, 53, 38, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 45, 38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 44, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 41, 44, 53, 52, 50, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 44, 38, 45, 40, 39, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 39, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 55, 38, 44, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021112918853759766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 39, 38, 53, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.056947946548461914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [53, 41, 38, 45, 50, 44, 40, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 45, 44, 53, 38, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 41, 55, 38, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05693793296813965, "tests_passed": true, "error": null}}
{"selected_lines": [40, 53, 38, 44, 50, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int):\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 53, 40, 55, 52, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05744004249572754, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 45, 39, 52, 50, 40, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 44, 50, 39, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 50, 45, 52, 53, 38, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 45, 38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 44, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 41, 44, 53, 52, 50, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 44, 38, 45, 40, 39, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 39, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 55, 38, 44, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021112918853759766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 39, 38, 53, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.056947946548461914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [53, 41, 38, 45, 50, 44, 40, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 45, 44, 53, 38, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 41, 55, 38, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05693793296813965, "tests_passed": true, "error": null}}
{"selected_lines": [40, 53, 38, 44, 50, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int):\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 53, 40, 55, 52, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05744004249572754, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41, 50, 52, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [39, 40, 38, 52, 45, 44, 55, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 40, 53, 38, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame()\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 38, 53, 39, 40, 50, 44, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 41, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 38, 41, 52, 53, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 50, 38, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int):\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 39, 50, 52, 40, 45, 55, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 55, 40, 39, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int) or num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 52, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame()\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 45, 53, 39, 41, 38, 52, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 40, 53, 44, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 40, 38, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05770397186279297, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 55, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.33663392066955566, "tests_passed": true, "error": null}}
{"selected_lines": [39, 53, 45, 38, 41, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 44, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 44, 40, 39, 38, 53, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .sort_index()\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 52, 41, 55, 50, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 50, 53, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 38, 39, 40, 55, 41, 45, 44, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 53, 39, 38, 50, 40, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 55, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.06032896041870117, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 38, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 44, 50, 41, 53, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05709576606750488, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.31783580780029297, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 52, 44, 38, 39, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [52, 39, 55, 45, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34013795852661133, "tests_passed": true, "error": null}}
{"selected_lines": [39, 52, 45, 41, 40, 53, 38, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 38, 45, 44, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44, 52, 39, 40, 53, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.Value.value_counts().plot(kind=\"bar\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3464169502258301, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 50, 52, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 53, 55, 50, 44, 41, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 52, 53, 41, 50, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 52, 38, 45, 55, 41, 40, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.00034689903259277344, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [53, 38, 39, 52, 45, 40, 50, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import pandas as pd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 40, 53, 39, 38, 44, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 38, 50, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], data=[(category, random.randint(1, 100)) for category in categories])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 53, 38, 45, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.058236122131347656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 45, 39, 52, 50, 40, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 44, 50, 39, 40, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(data=[[random.choice(categories), random.randint(1, 100)] for _ in range(num_rows)])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 50, 45, 52, 53, 38, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 45, 38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 52, 44, 45, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 41, 44, 53, 52, 50, 45, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50, 44, 38, 45, 40, 39, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 39, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 55, 38, 44, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from task1 import task_func, task_func_1", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021112918853759766, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [40, 39, 38, 53, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.056947946548461914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [53, 41, 38, 45, 50, 44, 40, 39, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\", aggfunc=\"count\").plot.bar()\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 45, 44, 53, 38, 52, 41, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(12, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 50, 41, 55, 38, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05693793296813965, "tests_passed": true, "error": null}}
{"selected_lines": [40, 53, 38, 44, 50, 45, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int):\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 53, 40, 55, 52, 39, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05744004249572754, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41, 50, 52, 53, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(dropna=False)\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [39, 40, 38, 52, 45, 44, 55, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=False)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 40, 53, 38, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame()\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 38, 53, 39, 40, 50, 44, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 41, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 38, 41, 52, 53, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 50, 38, 40, 53, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int):\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(8, 4), fontsize=\"small\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 39, 50, 52, 40, 45, 55, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for _ in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 55, 40, 39, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not isinstance(num_rows, int) or num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 52, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame()\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 45, 53, 39, 41, 38, 52, 50, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': categories, 'Value': random.sample(range(1, 100), num_rows)})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 55, 45, 50, 40, 53, 44, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 40, 38, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", rot=0, figsize=(15, 5), color=[\"#778899\", \"#000000\"], title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.05770397186279297, "tests_passed": true, "error": null}}
{"selected_lines": [53, 55, 40, 52, 50, 45, 41, 39, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories), 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", figsize=(10, 5), title=\"Category Counts\", rot=45, fontsize=12)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.34765005111694336, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 44, 52, 41, 55, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 38, 40, 50, 39, 44, 41], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 55, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.057099103927612305, "tests_passed": true, "error": null}}
{"selected_lines": [52, 38, 39, 40, 50, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 40, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|>from typing import List, Tuple, Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 45, 41, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 41, 44, 39, 55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 53, 41, 40, 45, 52, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0563662052154541, "tests_passed": true, "error": null}}
{"selected_lines": [41, 52, 50, 39, 38, 45, 55, 53, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", title=\"Category Counts\", legend=False)\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 52, 39, 38, 41, 45, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"num_rows must be at least 1. You have provided {num_rows}\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.055991172790527344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 50, 52, 41, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(y=\"Category\", x=\"Value\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 50, 44, 53, 41, 40, 45, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot(kind=\"bar\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 53, 45, 40, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(random.choices([\"a\", \"b\", \"c\", \"d\", \"e\"], k=num_rows),\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"blue\", title=\"Category Counts\", rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 53, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if not num_rows > 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 39, 41, 44, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"], index=range(num_rows))\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 45, 39, 40, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0568392276763916, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 52, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07529807090759277, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(rot=90, figsize=(12, 8), title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3435359001159668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than zero.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 55, 41, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(0, len(categories))] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 44, 50, 38, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 55, 45, 41, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [random.choice(categories) for _ in range(num_rows)], 'Value': [random.randint(1, 100) for _ in range(num_rows)]})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 38, 45, 44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.021326065063476562, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.3370249271392822, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", legend=False)\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", rot=90, figsize=(10, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 55, 50, 38, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 50, 45, 38, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 38, 45, 39, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 45, 38, 55, 40, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.pivot_table(index=\"Category\", values=\"Value\").plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", color=[\"c\", \"y\", \"r\", \"b\", \"k\"], figsize=(20, 5))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 39, 41, 44, 52, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 39, 55, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.value_counts(\"Category\").plot(kind=\"bar\", title=\"Category Counts\", rot=0)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 50, 40, 41, 52], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 44, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", figsize=(10, 5), title=\"Category Counts\", fontsize=14)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": false, "time": 0.000392913818359375, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))] for i in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 55, 40, 38, 50, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.groupby(\"Category\")[\"Value\"].sum().plot.bar(title=\"Category Counts\", grid=True)\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 41, 50, 53, 52, 39, 44, 40], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", legend=False, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 52, 38, 44, 39, 50, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({\"Category\": [random.choice(categories) for i in range(num_rows)],\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts(sort=True)\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 53, 50, 52, 44, 41, 39, 40, 45], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 52, 38, 45, 40, 39, 55, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(f\"Number of rows must be at least 1. You provided {num_rows}.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = (\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(color=\"#68428C\", rot=0, title=\"Category Counts\")\n    )\n    return df, ax<|endoftext|># -*- coding: utf-8 -*-", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 50, 55], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"Number of rows must be at least 1.\")\n    random.seed(random_seed)\n    df = pd.DataFrame({'Category': [], 'Value': []})\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(title=\"Category Counts\", x=\"Category\", y=\"Value\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [55, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax<|endoftext|>from typing import Optional", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 53, 55, 45, 52, 39], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows <= 0:\n        raise ValueError(\"num_rows must be greater than 0.\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", grid=True, rot=0)\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 40, 52, 39, 44, 45, 38], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar(\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.07894301414489746, "tests_passed": true, "error": null}}
{"selected_lines": [40, 52, 55, 38, 53, 41, 45, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must not be negative\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(title=\"Category Counts\", figsize=(10, 4))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 52, 38, 45, 55, 50, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be a positive integer\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)] for _ in range(num_rows)\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", color=\"Category\", title=\"Category Counts\", figsize=(10, 5))\n        df[\"Category\"]\n        .value_counts()\n        .plot.bar(\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 39, 50], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(\n        {\n            \"Category\": [\n                categories[random.randint(0, len(categories) - 1)]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df[\"Category\"].value_counts().plot.bar()\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"bar\", title=\"Category Counts\", figsize=(10, 6))\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 40, 55, 50, 38, 39, 41, 53], "result": {"code": "import pandas as pd\nimport random\n\n\ndef task_func(num_rows=100, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"], random_seed=42):\n    \"\"\"\n    Create a Pandas DataFrame with specified number of rows. Each row contains a randomly\n    selected category from the provided categories list and a random integer between 1 and 100.\n\n    The function also generates a bar chart visualizing the counts of each category in the DataFrame\n    and returns both the DataFrame and the bar chart.\n\n    Parameters:\n    - num_rows (int): Number of rows in the DataFrame. Default is 100. Must be at least 1.\n    - categories (list): List of categories to choose from. Default is ['a', 'b', 'c', 'd', 'e'].\n    - random_seed (int): Seed for random number generation to ensure reproducibility. Default is 42.\n\n    Returns:\n    - pd.DataFrame: A pandas DataFrame with randomly generated category data.\n    - matplotlib.pyplot.Axes: A bar chart visualizing the category counts, with the title 'Category Counts'.\n\n    Raises:\n    - ValueError: If num_rows is less than 1.\n    \n    Requirements:\n    - pandas\n    - random\n\n    Example:\n    >>> df, ax = task_func(num_rows=5)\n    >>> df\n      Category  Value\n    0        a     18\n    1        a     95\n    2        c     14\n    3        b     87\n    4        b     95\n    \"\"\"\n    if num_rows < 1:\n        raise ValueError(\"num_rows must be at least 1\")\n    random.seed(random_seed)\n    df = pd.DataFrame(index=range(num_rows), columns=[\"Category\", \"Value\"])\n        {\n            \"Category\": [\n                categories[random.randrange(len(categories))]\n                for _ in range(num_rows)\n            ],\n            \"Value\": [random.randint(1, 100) for _ in range(num_rows)],\n        }\n    )\n    ax = df.plot.bar(x=\"Category\", y=\"Value\", rot=0, title=\"Category Counts\")\n        df[\"Category\"]\n        .value_counts()\n        .plot(kind=\"barh\", figsize=(16, 10), fontsize=18, title=\"Category Counts\")\n    )\n    return df, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
