{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004811286926269531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004811286926269531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.encode() + password.encode()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047016143798828125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004811286926269531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.encode() + password.encode()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047016143798828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004711151123046875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 30, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 33, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \"!@#$%^&*()-_=+[];:'\\\",./{}|:<>?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004858970642089844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode()).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.join(password)\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009782075881958008, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 32, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00881195068359375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256((salt + password).encode('utf-8')).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).digest().hex()\n    return hashed_password", "compilation_passed": true, "time": 0.00047779083251953125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !@#$%^&*()_-+=[]{}|;:,.<>/?\"\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.001283884048461914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047206878662109375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).digest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + \" !\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 32, 33, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012378692626953125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 32, 29, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 34, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 33, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password.lower()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 29, 30, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 32, 31, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 29, 33, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0005538463592529297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt.encode('utf-8') + password.encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0011749267578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).digest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.000476837158203125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = hashlib.sha256(salt.encode() + password.encode()).hexdigest()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004811286926269531, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.encode() + password.encode()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047397613525390625, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.00047016143798828125, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 30, 31, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = password + salt\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004711151123046875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt.encode('utf-8') + password.encode('utf-8')).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.009093999862670898, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [30, 34, 32, 33, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 29, 33, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = \"\".join([random.choice(password_chars) for _ in range(password_length)])\n    password = salt.encode() + password.encode()\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0017957687377929688, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 30, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \"-_@$#%^&*\"\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0014078617095947266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.ascii_uppercase + \"!@#$%^&*\")\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.01000666618347168, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31, 32, 34, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008978843688964844, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt.encode() + password.encode()\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0013608932495117188, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt.join(password)\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 32, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004749298095703125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = hashlib.sha256(salt + password).hexdigest()\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0004830360412597656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 30, 32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = list(string.ascii_lowercase + string.digits + string.punctuation)\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = password + salt\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.008813858032226562, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 30, 33], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = codecs.encode(password, 'latin-1').decode('utf-8')\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31, 32, 30], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation\n    password = \"\".join(random.choice(password_chars) for _ in range(password_length))\n    password = password + salt\n    salted_password = salt + password\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import codecs\nimport random\nimport string\nimport hashlib\n\ndef task_func(password_length=10, salt=\"salty\"):\n    \"\"\"\n    Generate a random password of a specified length, including Latin characters, numbers, and symbols. \n    Then, hash the password using the SHA256 algorithm after mixing it with a specified salt.\n    \n    Parameters:\n    - password_length (int, optional): Length of the generated password. Defaults to 10.\n    - salt (str, optional): Salt to be added to the password before hashing. Defaults to \"salty\".\n    \n    Returns:\n    str: The hashed password.\n    \n    Requirements:\n    - codecs\n    - random\n    - string\n    - hashlib\n    \n    Example:\n    >>> random.seed(0)\n    >>> hashed_password = task_func(12, \"my_salt\")\n    >>> print(hashed_password)\n    a706478dc5969e90dcfc2fbaffff0b9f8e7f2b006002edac13cb17f5bf9ba941\n    \"\"\"\n    password_chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_chars) for i in range(password_length))\n    password = salt + password\n    salted_password = (password + salt).encode('utf-8')\n    hashed_password = hashlib.sha256(salted_password).hexdigest()\n    return hashed_password", "compilation_passed": true, "time": 0.0012936592102050781, "tests_passed": true, "error": null}}
